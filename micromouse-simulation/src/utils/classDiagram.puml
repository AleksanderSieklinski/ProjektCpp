@startuml

class Position {
    int x
    int y
    +operator==(Position): bool
    +operator!=(Position): bool
    +operator<(Position): bool
}

abstract class Entity {
    +getPosition(): Position
    +move(Direction)
}

enum Direction {
    UP
    DOWN
    LEFT
    RIGHT
}

class SensorData {
    bool frontObstacle
    bool leftObstacle
    bool rightObstacle
    bool backObstacle
}

class Maze {
    int width
    int height
    vector<vector<int>> mazeLayout
    Position destination
    +generateMaze()
    +isMoveValid(int, int): bool
    +getMazeLayout(): vector<vector<int>>
    +setDestination(int, int)
}

class Mouse {
    Position position
    Maze &knownMaze
    Logger<T> &logger
    vector<Position> path
    +makeDecision(SensorData)
    +move(Direction)
    +findPath(Position, Position): vector<Position>
    +calculateShortestPath()
}

class Logger<T> {
    string logFilePath
    ofstream logFile
    +Logger(string)
    +logData(T)
    +readLog()
}

Entity <|-- Mouse
Mouse --> Maze
Mouse --> SensorData
Mouse --> Logger
Maze --> Position
Entity --> Direction
Mouse --> Direction

@enduml
